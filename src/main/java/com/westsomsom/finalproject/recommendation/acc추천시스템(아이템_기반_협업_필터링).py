# -*- coding: utf-8 -*-
"""ACC추천시스템(아이템 기반 협업 필터링)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jCnL0bp8wtWidXiKKNABHYZhVUL2F1xw

# 추천시스템1 (주중/주말, 오전/오후 구분X)
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics.pairwise import cosine_similarity

file_path = '/content/DDUNIVDATA.csv'
data = pd.read_csv(file_path)

data

"""## 1. 데이터 전처리"""

data = data.dropna()  # 결측치 제거
data # 결측치 없음..

data.info()

data.describe()

"""## 2. 사용자별 구매 행동 집계"""

# 사용자 행동 데이터를 집계하기 위해 'cst_addr_no', 'sex', 'age'를 조합하여 사용자 식별자 생성
data['user_id'] = data['cst_addr_no'].astype(str) + '_' + data['sex'].astype(str) + '_' + data['age'].astype(str)
data.head()

data.value_counts('user_id').isnull().sum() # 모든 행정구역, 모든 성별, 모든 나이대 데이터 다 있음

data['user_id'].value_counts() # 최대 1232 최소 43

# 사용자-품목 행렬 생성
user_item_matrix = data.pivot_table(values='sale_amt', index='user_id', columns='lclss', aggfunc='sum', fill_value=0)
user_item_matrix

# 품목 간 코사인 유사도 계산
item_similarity = cosine_similarity(user_item_matrix.T)
item_similarity_df = pd.DataFrame(item_similarity, index=user_item_matrix.columns, columns=user_item_matrix.columns)
item_similarity_df

"""## 3. 추천 시스템 함수 정의"""

def recommend_stores(user_id, user_item_matrix, item_similarity_df, top_n=3):
    # 해당 사용자의 구매 기록 가져오기
    user_data = user_item_matrix.loc[user_id].values.reshape(1, -1)

    # 각 품목에 대한 예상 점수 계산 (유사도 기반)
    scores = np.dot(user_data, item_similarity_df.values) / np.sum(item_similarity_df.values, axis=1)

    # 점수가 높은 품목의 인덱스를 가져오기
    recommended_items = np.argsort(scores[0])[::-1][:top_n]

    # 추천 품목 코드 반환
    return [user_item_matrix.columns[item] for item in recommended_items]

# 예제: 특정 사용자에게 추천
example_user_id = '11.0_2_1'  # 서울 사는 20대 여성
recommended_stores = recommend_stores(example_user_id, user_item_matrix, item_similarity_df)
print("추천 팝업스토어 코드:", recommended_stores)

# 사용자 ID를 입력받아 추천 수행
while True:
    user_id = input("사용자 ID를 입력하세요 (종료하려면 'exit' 입력): ")
    if user_id.lower() == 'exit':
        print("추천 시스템을 종료합니다.")
        break

    recommended_stores = recommend_stores(user_id, user_item_matrix, item_similarity_df, top_n=3)
    if isinstance(recommended_stores, str):
        print(recommended_stores)  # 오류 메시지 출력
    else:
        print(f"추천 결과 (품목 코드): {recommended_stores}")

"""# 추천시스템2 (주중/주말, 오전/오후 구분)"""

# 사용자-아이템 행렬 생성 (시간대별로 구분)
user_item_matrix2 = data.pivot_table(
    values='sale_amt',
    index='user_id',
    columns=['lclss', 'weekend', 'aftern'],
    aggfunc='sum',
    fill_value=0
)

user_item_matrix2

# 품목 간 코사인 유사도 계산
item_similarity2 = cosine_similarity(user_item_matrix2.T)
item_similarity_df2 = pd.DataFrame(item_similarity2, index=user_item_matrix2.columns, columns=user_item_matrix2.columns)
item_similarity_df2

def recommend_stores_enhanced(user_id, user_item_matrix2, item_similarity_df2, top_n=3):
    # 사용자의 구매 기록 가져오기
    if user_id not in user_item_matrix2.index:
        print("해당 사용자 ID가 데이터에 없습니다.")
        return []

    user_data = user_item_matrix2.loc[user_id].values.reshape(1, -1)

    # 품목별 예상 점수 계산 (유사도 기반)
    scores = np.dot(user_data, item_similarity_df2.values) / np.sum(item_similarity_df2.values, axis=1)

    # 점수가 높은 순으로 품목을 정렬하고 상위 N개를 선택
    recommended_items = np.argsort(scores[0])[::-1][:top_n]

    # 추천 품목 코드 및 관련 시간대 정보 반환
    recommended = [user_item_matrix2.columns[item] for item in recommended_items]

    return recommended

# 예제: 특정 사용자에게 추천
example_user_id = '11.0_2_1'  # 서울 사는 20대 여성
recommended_stores = recommend_stores_enhanced(example_user_id, user_item_matrix2, item_similarity_df2)
print("개선된 추천 결과:", recommended_stores) # 순서대로 (품목 코드, 주말/주중, 오전/오후)

# 사용자 ID를 입력받아 추천 수행
while True:
    user_id = input("사용자 ID를 입력하세요 (종료하려면 'exit' 입력): ")
    if user_id.lower() == 'exit':
        print("추천 시스템을 종료합니다.")
        break

    recommended_stores = recommend_stores_enhanced(user_id, user_item_matrix2, item_similarity_df2, top_n=3)
    if isinstance(recommended_stores, str):
        print(recommended_stores)  # 오류 메시지 출력
    else:
        print(f"추천 결과 (품목, 주중/주말, 오전/오후): {recommended_stores}")

"""# 성능평가"""

from sklearn.model_selection import train_test_split

# 데이터 분할
train_data, test_data = train_test_split(data, test_size=0.25, random_state=42)

print(train_data.shape)
print(test_data.shape)

"""## 평가 지표
* Precision@K: 추천된 아이템이 얼마나 정확한지 평가.
* Recall@K: 사용자의 구매 패턴을 얼마나 잘 예측했는지 확인.
* F1-Score: Precision과 Recall 간의 균형.
* NDCG@K: 추천 아이템의 순서가 얼마나 적절한지 평가.
"""

# 1) Precision@K 추천한 아이템 중에서 사용자가 실제로 구매한 아이템 비율.
def precision_at_k(relevant_items, recommended_items, k=3):
    recommended_at_k = recommended_items[:k]
    relevant_at_k = set(recommended_at_k) & set(relevant_items)
    return len(relevant_at_k) / len(recommended_at_k)

# 2) Recall@K 실제 구매한 아이템 중에서 추천된 아이템 비율.
def recall_at_k(relevant_items, recommended_items, k=3):
    recommended_at_k = recommended_items[:k]
    relevant_at_k = set(recommended_at_k) & set(relevant_items)
    return len(relevant_at_k) / len(relevant_items) if len(relevant_items) > 0 else 0

# 3) F1-Score Precision과 Recall의 조화 평균.
def f1_score(precision, recall):
    if precision + recall == 0:
        return 0
    return 2 * (precision * recall) / (precision + recall)

"""## 평가 실행"""

# 성능 평가 함수
def evaluate_recommendation_system(recommend_func, user_item_matrix, item_similarity_df, test_data, top_n=3):
    precision_list, recall_list, f1_list, ndcg_list = [], [], [], []

    for user_id in test_data['user_id'].unique():
        if user_id not in user_item_matrix.index:
            continue
        relevant_items = test_data[test_data['user_id'] == user_id]['lclss'].unique()
        recommended_items = recommend_func(user_id, user_item_matrix, item_similarity_df, top_n)

        precision = precision_at_k(relevant_items, recommended_items, k=top_n)
        recall = recall_at_k(relevant_items, recommended_items, k=top_n)
        f1 = f1_score(precision, recall)

        precision_list.append(precision)
        recall_list.append(recall)
        f1_list.append(f1)

    print(f"Precision@{top_n}: {np.mean(precision_list):.4f}")
    print(f"Recall@{top_n}: {np.mean(recall_list):.4f}")
    print(f"F1-Score@{top_n}: {np.mean(f1_list):.4f}")

# 성능 평가 실행
print("\n추천 시스템 1 성능 평가")
evaluate_recommendation_system(recommend_stores, user_item_matrix, item_similarity_df, test_data, top_n=3)

"""# 데분 시각화"""

import seaborn as sns
import matplotlib.pyplot as plt

# 성별에 따른 총 구매 금액 시각화
gender_purchase = data.groupby('sex')['sale_amt'].sum().reset_index()
gender_purchase['sex'] = gender_purchase['sex'].map({1: 'Male', 2: 'Female'})

plt.figure(figsize=(6, 4))
sns.barplot(x='sex', y='sale_amt', data=gender_purchase)
plt.title('Total Purchase Amount by Gender')
plt.xlabel('Gender')
plt.ylabel('Total Purchase Amount')
plt.show()

# 연령대별 총 구매 금액 시각화
age_purchase = data.groupby('age')['sale_amt'].sum().reset_index()
age_purchase['age_group'] = age_purchase['age'].map({
    1: '20s and below', 2: '30s', 3: '40s', 4: '50s', 5: '60s and above'
})

plt.figure(figsize=(8, 4))
sns.barplot(x='age_group', y='sale_amt', data=age_purchase, order=[
    '20s and below', '30s', '40s', '50s', '60s and above'
])
plt.title('Total Purchase Amount by Age Group')
plt.xlabel('Age Group')
plt.ylabel('Total Purchase Amount')
plt.show()

# 주말과 주중에 따른 총 구매 금액 시각화
weekend_purchase = data.groupby('weekend')['sale_amt'].sum().reset_index()
weekend_purchase['weekend'] = weekend_purchase['weekend'].map({0: 'Weekday', 1: 'Weekend'})

plt.figure(figsize=(6, 4))
sns.barplot(x='weekend', y='sale_amt', data=weekend_purchase)
plt.title('Total Purchase Amount: Weekday vs. Weekend')
plt.xlabel('Time Period')
plt.ylabel('Total Purchase Amount')
plt.show()

# 품목별 총 구매 금액 시각화
item_purchase = data.groupby('lclss')['sale_amt'].sum().reset_index()
plt.figure(figsize=(12, 6))
sns.barplot(x='lclss', y='sale_amt', data=item_purchase)
plt.title('Total Purchase Amount by Item Category')
plt.xlabel('Item Category Code')
plt.ylabel('Total Purchase Amount')
plt.xticks(rotation=45)
plt.show()

# 월별 매출 데이터 집계
data['month'] = data['yyyymm'].astype(str).str[:4] + '-' + data['yyyymm'].astype(str).str[4:6]
monthly_sales = data.groupby('month')['sale_amt'].sum().reset_index()

# 시각화
plt.figure(figsize=(10, 5))
sns.lineplot(x='month', y='sale_amt', data=monthly_sales)
plt.title('Monthly Sales Trend')
plt.xlabel('Month')
plt.ylabel('Total Sales Amount')
plt.xticks(rotation=45)
plt.show()

# 오전과 오후의 매출 분석
time_of_day_sales = data.groupby('aftern')['sale_amt'].sum().reset_index()
time_of_day_sales['aftern'] = time_of_day_sales['aftern'].map({0: 'Morning', 1: 'Afternoon'})

plt.figure(figsize=(6, 4))
sns.barplot(x='aftern', y='sale_amt', data=time_of_day_sales)
plt.title('Sales Amount: Morning vs. Afternoon')
plt.xlabel('Time of Day')
plt.ylabel('Total Sales Amount')
plt.show()

# 구매 빈도가 높은 고객 분석
high_frequency_customers = data.groupby('user_id')['sale_cnt'].sum().reset_index().sort_values(by='sale_cnt', ascending=False)
print("Top 5 High-Frequency Shoppers:\n", high_frequency_customers.head(5))